import { useState, useEffect } from 'react'
import AddNote from './components/AddNote'
import NoteList from './components/NoteList'

export default function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [notes, setNotes] = useState([])
  const [isOnline, setIsOnline] = useState(navigator.onLine)
  const [installPrompt, setInstallPrompt] = useState(null)
  const [showInstallButton, setShowInstallButton] = useState(false)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ localStorage
  useEffect(() => {
    try {
      const savedNotes = localStorage.getItem('notes')
      if (savedNotes) setNotes(JSON.parse(savedNotes))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–º–µ—Ç–æ–∫:', error)
    }
  }, [])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤ localStorage
  useEffect(() => {
    try {
      localStorage.setItem('notes', JSON.stringify(notes))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫:', error)
    }
  }, [notes])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  useEffect(() => {
    const handleNetworkChange = () => {
      setIsOnline(navigator.onLine)
    }

    window.addEventListener('online', handleNetworkChange)
    window.addEventListener('offline', handleNetworkChange)

    return () => {
      window.removeEventListener('online', handleNetworkChange)
      window.removeEventListener('offline', handleNetworkChange)
    }
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
  useEffect(() => {
    const handleBeforeInstallPrompt = (e) => {
      e.preventDefault()
      setInstallPrompt(e)
      setShowInstallButton(true)
    }

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt)

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt)
    }
  }, [])

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
  const handleAddNote = (text) => {
    const newNote = {
      id: Date.now(),
      text: text.trim(),
      date: new Date().toLocaleString()
    }
    setNotes(prevNotes => [newNote, ...prevNotes])
  }

  const handleDeleteNote = (id) => {
    setNotes(prevNotes => prevNotes.filter(note => note.id !== id))
  }

  const handleUpdateNote = (id, newText) => {
    setNotes(prevNotes => 
      prevNotes.map(note => 
        note.id === id ? { ...note, text: newText.trim() } : note
      )
    )
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const handleInstallClick = async () => {
    if (!installPrompt) return
    installPrompt.prompt()
    const { outcome } = await installPrompt.userChoice
    if (outcome === 'accepted') {
      setShowInstallButton(false)
    }
  }

  return (
    <div className="app-container">
      {/* –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA */}
      {showInstallButton && (
        <button 
          onClick={handleInstallClick}
          className="install-button"
          aria-label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        >
          ‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        </button>
      )}

      <header className="app-header">
        <h1>üìù –û—Ñ–ª–∞–π–Ω-–ó–∞–º–µ—Ç–∫–∏</h1>
        {!isOnline && (
          <div className="offline-banner" role="status">
            ‚ö° –û—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º
          </div>
        )}
      </header>

      <main className="main-content">
        <AddNote onAdd={handleAddNote} />
        <NoteList 
          notes={notes}
          onDelete={handleDeleteNote}
          onUpdate={handleUpdateNote}
        />
      </main>

      <footer className="app-footer">
        <p>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</p>
      </footer>
    </div>
  )
}